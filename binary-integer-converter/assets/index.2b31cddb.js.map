{"version":3,"file":"index.2b31cddb.js","sources":["../../vite/modulepreload-polyfill","../../src/binary-intiger-logic.ts","../../src/binary-converter.ts"],"sourcesContent":["const p = function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n};__VITE_IS_MODERN__&&p();","/**\r\n * this holds an 8-bit integer and converts it between 2's complement, signed magnitude, 1's complement, and excess-128\r\n */\r\nexport class BinaryInt {\r\n  /**\r\n   * the internal Int8Array where the binary data is stored in slot zero\r\n   */\r\n  #data: Int8Array;\r\n\r\n  /**\r\n   * an error message or an empty string if no error has occurred\r\n   */\r\n  hasError = \"\";\r\n\r\n  /**\r\n   * create a BinaryInt from some binary data\r\n   * @param data a single byte of data\r\n   */\r\n  constructor(data: Int8Array) {\r\n    this.#data = data || Int8Array.of(0);\r\n  }\r\n\r\n  /**\r\n   * creates a BinaryInt from a binary string\r\n   * @param string an 8 character string containing only 1s and 0s\r\n   * @returns a BinaryInt with the same data as the string\r\n   */\r\n  static fromString(string: string) {\r\n    const data = Int8Array.of(0);\r\n    const bits = string.split(\"\").map((char) => parseInt(char));\r\n    for (const bit of bits) {\r\n      data[0] <<= 1;\r\n      data[0] |= bit;\r\n    }\r\n    return new this(data);\r\n  }\r\n\r\n  /**\r\n   * converts the current state to a binary string\r\n   * @returns a string of 1s and 0s\r\n   */\r\n  toString() {\r\n    if (this.hasError) {\r\n      return this.hasError;\r\n    }\r\n\r\n    let output = \"\";\r\n    for (let i = 0; i < 8; i++) {\r\n      if (i % 4 == 0) {\r\n        output = \" \" + output;\r\n      }\r\n      output = (this.#data[0] & 1) + output;\r\n      this.#data[0] >>= 1;\r\n    }\r\n    return output.trim();\r\n  }\r\n\r\n  /**\r\n   * creates a BinaryInt from a number\r\n   * @param string number between -128 and 127\r\n   * @returns a BinaryInt a 2's complement representation of the number\r\n   */\r\n  static fromNumber(int: number) {\r\n    return new this(Int8Array.from([int]));\r\n  }\r\n\r\n  /**\r\n   * interprets the current state as a 2's complement\r\n   * @returns the internal state\r\n   */\r\n  toNumber() {\r\n    return this.#data[0];\r\n  }\r\n\r\n  /**\r\n   * converts the internal state from signed magnitude to 2's complement\r\n   * @returns the current instance for easier chaining\r\n   */\r\n  fromSignedMagnitude() {\r\n    if (this.#data[0] & 0b1000_0000) {\r\n      this.#data[0] ^= 0b0111_1111;\r\n    }\r\n\r\n    this.fromOnes();\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * converts the internal state from 2's complement to signed magnitude\r\n   * @returns the current instance for easier chaining\r\n   */\r\n  toSignedMagnitude() {\r\n    this.toOnes();\r\n\r\n    if (this.#data[0] & 0b1000_0000) {\r\n      this.#data[0] ^= 0b0111_1111;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * converts the internal state from 1's complement to 2's complement\r\n   * @returns the current instance for easier chaining\r\n   */\r\n  fromOnes() {\r\n    if (this.#data[0] < 0) {\r\n      this.#data[0] += 1;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * converts the internal state from 2's complement to a's complement\r\n   * @returns the current instance for easier chaining\r\n   */\r\n  toOnes() {\r\n    if (this.#data[0] == -128) {\r\n      this.hasError = \"can't fit in 8 bits\";\r\n    }\r\n\r\n    if (this.#data[0] < 0) {\r\n      this.#data[0] -= 1;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * converts the internal state between 2's complement and excess-128\r\n   * @returns the current instance for easier chaining\r\n   */\r\n  excess128() {\r\n    this.#data[0] ^= 0b1000_0000;\r\n    return this;\r\n  }\r\n}\r\n","import { LitElement, html } from \"lit\";\nimport { customElement, state } from \"lit/decorators.js\";\nimport { BinaryInt } from \"./binary-intiger-logic\";\nimport \"./index.css\";\n\n/**\n * the main element of the page\n * @author Nate Stringham\n */\n@customElement(\"binary-converter\")\nexport class BinaryConverterElement extends LitElement {\n  /**\n   * the 1s and 0s that the user input as a binary number\n   */\n  @state()\n  binaryNumber: string = \"\";\n\n  /**\n   * an error caused by invalid binary input or undefined if there is no error\n   */\n  @state()\n  binaryError: string | undefined;\n\n  /**\n   * the decimal number that the user input\n   */\n  @state()\n  decimalNumber: number = 0;\n\n  /**\n   * an error caused by invalid decimal input or undefined if there is no error\n   */\n  @state()\n  decimalError: string | undefined;\n\n  render() {\n    return html`\n      <div class=\"section\">\n        <label>\n          <h3>Convert Binary to Decimal</h3>\n          <input id=\"bin\" type=\"number\" min=\"0\" max=\"11111111\" @input=\"${this.#binOnInput}\" />\n        </label>\n        ${this.binaryError ? html`<p class=\"error\">${this.binaryError}</p>` : undefined}\n        <table>\n          <tbody>\n            <tr>\n              <th scope=\"row\">Signed Magnitude</th>\n              <td>${BinaryInt.fromString(this.binaryNumber).fromSignedMagnitude().toNumber()}</td>\n            </tr>\n            <tr>\n              <th scope=\"row\">One's Complement</th>\n              <td>${BinaryInt.fromString(this.binaryNumber).fromOnes().toNumber()}</td>\n            </tr>\n            <tr>\n              <th scope=\"row\">Two's Complement</th>\n              <td>${BinaryInt.fromString(this.binaryNumber).toNumber()}</td>\n            </tr>\n            <tr>\n              <th scope=\"row\">Excess-128</th>\n              <td>${BinaryInt.fromString(this.binaryNumber).excess128().toNumber()}</td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n      <div class=\"section\">\n        <label>\n          <h3>Convert Decimal to Binary</h3>\n          <input id=\"dec\" type=\"number\" min=\"-128\" max=\"127\" @input=\"${this.#decOnInput}\" />\n        </label>\n        ${this.decimalError ? html`<p class=\"error\">${this.decimalError}</p>` : undefined}\n        <table>\n          <tbody>\n            <tr>\n              <th scope=\"row\">Signed Magnitude</th>\n              <td>${BinaryInt.fromNumber(this.decimalNumber).toSignedMagnitude().toString()}</td>\n            </tr>\n            <tr>\n              <th scope=\"row\">One's Complement</th>\n              <td>${BinaryInt.fromNumber(this.decimalNumber).toOnes().toString()}</td>\n            </tr>\n            <tr>\n              <th scope=\"row\">Two's Complement</th>\n              <td>${BinaryInt.fromNumber(this.decimalNumber).toString()}</td>\n            </tr>\n            <tr>\n              <th scope=\"row\">Excess-128</th>\n              <td>${BinaryInt.fromNumber(this.decimalNumber).excess128().toString()}</td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    `;\n  }\n\n  /**\n   * validate binary input and trigger state change\n   */\n  #binOnInput() {\n    let newString = this.binInputElement.value;\n\n    // handle decremented value\n    newString = newString.replace(/9/g, \"1\");\n\n    // handle incremented value\n    while (newString.includes(\"2\")) {\n      newString = newString.replace(/12/g, \"20\");\n      newString = newString.replace(/(^2)|(02)/g, \"10\");\n    }\n\n    this.binInputElement.value = newString;\n\n    newString = newString.replace(/[  ]/g, \"\");\n\n    this.binaryError = undefined;\n\n    if (!newString.match(/^[01]*$/)) {\n      this.binaryError = 'input must be entirely \"1\" and \"0\"';\n      return;\n    }\n\n    if (newString.length > 8) {\n      this.binaryError = \"input must be at most 8 bits long\";\n      return;\n    }\n\n    while (newString.length < 8) {\n      newString = \"0\" + newString;\n    }\n\n    this.binaryNumber = newString;\n  }\n\n  /**\n   * validate decimal input and trigger state change\n   */\n  #decOnInput() {\n    let newInt = parseInt(this.decInputElement.value);\n\n    if (isNaN(newInt)) {\n      newInt = 0;\n    }\n\n    this.decimalError = undefined;\n    if (-128 > newInt || newInt > 127) {\n      this.decimalError = \"input must be between 127 and -128\";\n      return;\n    }\n\n    this.decimalNumber = newInt;\n  }\n\n  /**\n   * the input text box where the user types a binary value\n   */\n  private get binInputElement() {\n    return this.querySelector(\"input#bin\") as HTMLInputElement;\n  }\n\n  /**\n   * the input text box where the user types a decimal value\n   */\n  private get decInputElement() {\n    return this.querySelector(\"input#dec\") as HTMLInputElement;\n  }\n\n  // disable shadow dom\n  createRenderRoot() {\n    return this;\n  }\n}\n\n// add binary-converter to typescripts global interface\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"binary-converter\": BinaryConverterElement;\n  }\n}\n"],"names":["relList","document","createElement","supports","link","querySelectorAll","MutationObserver","mutations","mutation","type","node","addedNodes","tagName","rel","observe","childList","subtree","ep","fetchOpts","script","integrity","referrerpolicy","referrerPolicy","crossorigin","credentials","getFetchOpts","href","p","constructor","data","Int8Array","of","string","bits","split","map","char","parseInt","bit","this","toString","hasError","output","i","trim","int","from","toNumber","__privateGet","fromSignedMagnitude","fromOnes","toSignedMagnitude","toOnes","excess128","LitElement","render","html","__privateMethod","binaryError","BinaryInt","fromString","binaryNumber","decimalError","fromNumber","decimalNumber","querySelector","createRenderRoot","newString","binInputElement","value","replace","includes","match","length","newInt","decInputElement","isNaN","__decorateClass","state","BinaryConverterElement","prototype","customElement"],"mappings":"8XAAU,iBACAA,EAAUC,SAASC,cAAc,QAAQF,aAC3CA,GAAWA,EAAQG,UAAYH,EAAQG,SAAS,6BAGzCC,KAAQH,SAASI,iBAAiB,+BAC1BD,OAEfE,kBAAkBC,cACPC,KAAYD,KACG,cAAlBC,EAASC,eAGFC,KAAQF,EAASG,WACH,SAAjBD,EAAKE,SAAmC,kBAAbF,EAAKG,OACjBH,MAG5BI,QAAQb,SAAU,CAAEc,WAAW,EAAMC,SAAS,eAezBZ,MAChBA,EAAKa,YAGJA,IAAK,QAEJC,WApBYC,SACZD,EAAY,UACdC,EAAOC,cACGA,UAAYD,EAAOC,WAC7BD,EAAOE,mBACGC,eAAiBH,EAAOE,gBACX,oBAAvBF,EAAOI,cACGC,YAAc,UACI,cAAvBL,EAAOI,cACFC,YAAc,SAEdA,YAAc,cACrBN,EAQWO,CAAarB,SACzBA,EAAKsB,KAAMR,IAEvBS,WCxBAC,YAAYC,8CAND,gBAOIA,GAAQC,UAAUC,GAAG,8EAQlBC,SACVH,EAAOC,UAAUC,GAAG,GACpBE,EAAOD,EAAOE,MAAM,IAAIC,KAAKC,GAASC,SAASD,eAC1CE,KAAOL,IACX,KAAO,IACP,IAAMK,SAEN,IAAIC,KAAKV,GAOlBW,cACMD,KAAKE,gBACAF,KAAKE,aAGVC,EAAS,WACJC,EAAI,EAAGA,EAAI,EAAGA,IACjBA,EAAI,GAAK,MACF,IAAMD,MAES,YAAL,IAAUA,YACpB,KAAO,SAEbA,EAAOE,yBAQEC,UACT,IAAIN,KAAKT,UAAUgB,KAAK,CAACD,KAOlCE,kBACSC,UAAW,GAOpBC,6BACsB,IAAhBD,UAAW,eACF,IAAM,UAGdE,WAEEX,KAOTY,gCACOC,SAEe,IAAhBJ,UAAW,eACF,IAAM,KAGZT,KAOTW,kBACMF,UAAW,GAAK,cACP,IAAM,GAEZT,KAOTa,qBACMJ,UAAW,UACRP,SAAW,uBAGdO,UAAW,GAAK,cACP,IAAM,GAEZT,KAOTc,6BACa,IAAM,IACVd,2OC5HiCe,EAArC1B,wEAKkB,sBAYC,EAQxB2B,gBACSC,+HAI8DC,yBAE/DlB,KAAKmB,YAAcF,qBAAwBjB,KAAKmB,uBAAoB,+DAK1DC,EAAUC,WAAWrB,KAAKsB,cAAcZ,sBAAsBF,oEAI9DY,EAAUC,WAAWrB,KAAKsB,cAAcX,WAAWH,oEAInDY,EAAUC,WAAWrB,KAAKsB,cAAcd,8DAIxCY,EAAUC,WAAWrB,KAAKsB,cAAcR,YAAYN,sKAQDU,yBAE7DlB,KAAKuB,aAAeN,qBAAwBjB,KAAKuB,wBAAqB,+DAK5DH,EAAUI,WAAWxB,KAAKyB,eAAeb,oBAAoBX,oEAI7DmB,EAAUI,WAAWxB,KAAKyB,eAAeZ,SAASZ,oEAIlDmB,EAAUI,WAAWxB,KAAKyB,eAAexB,8DAIzCmB,EAAUI,WAAWxB,KAAKyB,eAAeX,YAAYb,0EAqE9DD,KAAK0B,cAAc,0CAOnB1B,KAAK0B,cAAc,aAI5BC,0BACS3B,sCArEH4B,EAAY5B,KAAK6B,gBAAgBC,YAGzBF,EAAUG,QAAQ,KAAM,KAG7BH,EAAUI,SAAS,QACZJ,EAAUG,QAAQ,MAAO,QACzBH,EAAUG,QAAQ,aAAc,cAGzCF,gBAAgBC,MAAQF,IAEjBA,EAAUG,QAAQ,QAAS,SAElCZ,iBAAc,EAEdS,EAAUK,MAAM,cAKjBL,EAAUM,OAAS,OAChBf,YAAc,8CAIdS,EAAUM,OAAS,KACZ,IAAMN,OAGfN,aAAeM,YAbbT,YAAc,qEAoBjBgB,EAASrC,SAASE,KAAKoC,gBAAgBN,OAEvCO,MAAMF,OACC,QAGNZ,kBAAe,OACTY,GAAUA,EAAS,SACvBZ,aAAe,0CAIjBE,cAAgBU,MArIvBG,GADCC,KACDC,EAAAC,4BAMAH,GADCC,KACDC,EAAAC,2BAMAH,GADCC,KACDC,EAAAC,6BAMAH,GADCC,KACDC,EAAAC,4BAvBKD,KADNE,EAAc,qBACRF"}